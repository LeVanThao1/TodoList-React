{"version":3,"sources":["img/verified.svg","img/success.svg","img/tick-sign.svg","components/todoItem.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoItem","this","props","item","onClicked","cases","urlImage","check","isComplete","checkDone","className","classNames","TodoItemComplete","src","width","onClick","title","PureComponent","memo","App","state","case","emptyItem","TodoList","defaultAll","inputElement","React","createRef","onAddItem","bind","onChange","onClickAll","onClickSelectActive","onClickSelectAll","onClickSelectCompleted","onClickClear","current","focus","event","index","indexOf","setState","slice","text","target","value","keyCode","trim","map","filter","tick","type","placeholder","onKeyUp","focusing","ref","length","key","onClickedItem","reduce","count","a","select","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f3dd1deb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/verified.671482d2.svg\";","module.exports = __webpack_public_path__ + \"static/media/success.37c6455f.svg\";","module.exports = __webpack_public_path__ + \"static/media/tick-sign.81352013.svg\";","import React, { PureComponent, memo } from 'react';\nimport './todoItem.css';\nimport classNames from 'classnames';\nimport check from '../img/verified.svg';\nimport checkDone from '../img/success.svg';\nimport PropTypes from 'prop-types';\n\nclass TodoItem extends PureComponent {\n    render() {\n        const { item, onClicked, cases } = this.props;\n        let urlImage = check;\n        if (item.isComplete) {\n            urlImage = checkDone\n        }\n        if (cases === \"Active\") {\n            return (\n                !item.isComplete && <div className={ classNames(\"TodoItem\", { TodoItemComplete: item.isComplete })}>\n                <img src={urlImage} width={32} onClick = {onClicked}></img>\n                <p>{ item.title }</p>\n                </div>\n            )\n        } else if (cases === \"Completed\") {\n            return (\n                item.isComplete && <div className={ classNames(\"TodoItem\", { TodoItemComplete: item.isComplete })}>\n                <img src={urlImage} width={32} onClick = {onClicked}></img>\n                <p>{ item.title }</p>\n                </div>\n            )\n        }\n        return (\n            <div className={ classNames(\"TodoItem\", { TodoItemComplete: item.isComplete })}>\n                <img src={urlImage} width={32} onClick = {onClicked}></img>\n                <p>{ item.title }</p>\n            </div>\n        )\n    }\n}\n\nTodoItem.propTypes = {\n    item: PropTypes.shape({\n        isComplete: PropTypes.bool.isRequired,\n        title: PropTypes.string.isRequired\n    }),\n    onClick: PropTypes.func\n}\nexport default memo(TodoItem);","import React from 'react';\nimport './App.css';\nimport { Component } from 'react';\nimport TodoItem from './components/todoItem';\nimport tick from './img/tick-sign.svg';\nimport classNames from 'classnames'\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      case: \"\",\n      emptyItem: \"\",\n      TodoList: [\n        { title: \"Đi Chơi\", isComplete: true }, \n        { title: \"Đi Ngủ\", isComplete: false }, \n        { title: \"Đi Xem Phim\", isComplete: false }  \n      ],\n      defaultAll : false\n    };\n    this.inputElement = React.createRef();\n    this.onAddItem = this.onAddItem.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.onClickAll = this.onClickAll.bind(this);\n    this.onClickSelectActive = this.onClickSelectActive.bind(this);\n    this.onClickSelectAll = this.onClickSelectAll.bind(this);\n    this.onClickSelectCompleted = this.onClickSelectCompleted.bind(this);\n    this.onClickClear = this.onClickClear.bind(this);\n  }\n\n  componentDidMount () {\n    this.inputElement.current.focus();\n  }\n\n  onClickedItem (item) {\n    return (event) => {\n      const isComplete = item.isComplete;\n      const { TodoList } = this.state;\n      const index = TodoList.indexOf(item);\n      this.setState({\n        TodoList: [\n          ...TodoList.slice(0, index),\n          {\n            ...item, isComplete: !isComplete\n          },              \n          ...TodoList.slice(index + 1)\n        ]\n      });\n    }\n  }\n\n  onAddItem (event) {\n    let text = event.target.value;\n    if (event.keyCode === 13) {\n      if (!text) {\n        return;\n      }\n      text = text.trim();\n      if (!text) {\n        return;\n      }\n      this.setState({\n        emptyItem: \"\",\n        TodoList: [\n          { title: text, isComplete: false },\n          ...this.state.TodoList\n        ]\n      });\n      event.target.value = \"\";\n    } \n  }\n\n  onChange(event) {\n    this.setState({\n      emptyItem: event.target.value\n    });\n  }\n\n  onClickAll() {\n    this.setState({\n      TodoList: this.state.TodoList.map(item => {\n        item.isComplete = !this.state.defaultAll;\n        return item;\n      }),\n      defaultAll: !this.state.defaultAll\n    });\n  }\n\n  onClickClear () {\n    this.setState({\n      TodoList: this.state.TodoList.filter(item => !item.isComplete)\n    });\n  }\n  onClickSelectActive () {\n    this.setState({\n      ...this.state,\n      case: \"Active\"\n    });\n  }\n\n  onClickSelectAll () {\n    this.setState({\n      ...this.state,\n      case: \"All\"\n    });\n  }\n\n  onClickSelectCompleted () {\n    this.setState({\n      ...this.state,\n      case: \"Completed\"\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Header\">\n          <img src={tick} width={32} onClick={this.onClickAll}></img>\n          <input type=\"text\" \n            value={this.emptyItem} \n            placeholder=\"What need to be done ?\" \n            onChange={this.onChange} \n            onKeyUp={this.onAddItem} \n            className={classNames({focusing: this.state.emptyItem !== \"\"})}\n            ref={this.inputElement}  \n          />\n        </div>\n        {\n          this.state.TodoList.length > 0 && this.state.TodoList.map((item, index) => \n            <TodoItem \n              item = { item } \n              key = { index } \n              cases = { this.state.case }\n              onClicked={this.onClickedItem(item)}\n            />\n          )\n        }\n        {\n          this.state.TodoList.length === 0 && <div className=\"notify\">Nothing Item</div>\n        }\n        <div className=\"Footer\">\n          <span className=\"todo-count\">{this.state.TodoList.reduce((count, a)=> count + !a.isComplete,0)} Item left</span>\n          <ul className=\"filter\">\n            <li onClick={this.onClickSelectAll} className={ classNames({select: this.state.case===\"All\"})}>All</li>\n            <li className={ classNames({select: this.state.case===\"Active\"})} onClick={this.onClickSelectActive}>Active</li>\n            <li onClick={this.onClickSelectCompleted} className={ classNames({select: this.state.case===\"Completed\"})}>Completed</li>\n          </ul>\n          {\n            this.state.TodoList.reduce((count, a)=> count + a.isComplete,0) > 0 && <button className=\"Clear-Completed\" onClick={this.onClickClear}>Clear Completed</button>\n          }\n          \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}